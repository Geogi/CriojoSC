/*
 * Copyright (c) 2013 Mines Nantes.
 *
 * This file is part of CriojoSC.
 *
 * CriojoSC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CriojoSC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CriojoSC.  If not, see <http://www.gnu.org/licenses/>.
 */

<%
 def gt(i: Int, f: (Int) => String) = (1 to i).map(f).mkString(", ")
 def tl(i: Int) = gt(i, "T" + _)
%>
package fr.emn.criojosc

import model.relation._

object Relation {
  def apply[T1] = new TypedRelation[T1]
  def apply[T1](s: String) = new TypedRelation[T1] {
    override val optName = Some(s)
  }
  def multi[T1](ss: String*) = ss.map(apply[T1](_))
#for (i <- 2 to 22)
  def apply[<%=tl(i)%>] = new TypedRelation<%=i%>[<%=tl(i)%>]
  def apply[<%=tl(i)%>](s: String) = new TypedRelation<%=i%>[<%=tl(i)%>] {
    override val optName = Some(s)
  }
  def multi<%=i%>[<%=tl(i)%>](ss: String*) = ss.map(apply[<%=tl(i)%>](_))
#end
}
