/*
 * Copyright (c) 2013 Mines Nantes.
 *
 * This file is part of CriojoSC.
 *
 * CriojoSC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CriojoSC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CriojoSC.  If not, see <http://www.gnu.org/licenses/>.
 */

<%
 def gt(i: Int, f: (Int) => String) = (1 to i).map(f).mkString(", ")
 def tl(i: Int) = gt(i, "T" + _)
%>
package fr.emn.criojosc.model
package pattern

#for (i <- 2 to 22)
class Tuple<%=i%>Pattern[<%=gt(i, "+T" + _)%>](val origin: (<%=gt(i, "Pattern[T" + _ + "]")%>)) extends Pattern[(<%=tl(i)%>)] {
  def matching[S >: (<%=tl(i)%>)](proposed: S, s: Valuation) = proposed match {
    case ptuple: (<%=gt(i, j => "_")%>) => cov_matching(ptuple, s)
    case _ => (false, s)
  }

  private def cov_matching[<%=gt(i, j => "S" + j + " >: T" + j)%>](proposed: (<%=gt(i, "S" + _)%>), s: Valuation): (Boolean, Valuation) = {
    var pr = (false, s)
    var ps = s
#for (j <- 1 to i)
    pr = origin._<%=j%>.matching(proposed._<%=j%>, ps)
    if (!pr._1)
      return (false, s)
    ps = pr._2
#end
    (true, ps)
  }

  override def toString = <%=(1 to i).map("origin._" + _).mkString(" + \", \" + ")%>
}

#end
