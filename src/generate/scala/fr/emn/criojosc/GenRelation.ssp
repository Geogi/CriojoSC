<%
 def gt(i: Int, f: (Int) => String) = (1 to i).map(f).mkString(", ")
 def tl(i: Int) = gt(i, "T" + _)
%>

object Relation {
  def apply[T1] = new TypedRelation[T1]
#for (i <- 2 to 22)
  def apply[<%=tl(i)%>] = new TypedRelation<%=i%>[<%=tl(i)%>]
#end
}

#for (i <- 2 to 22)
class TypedRelation<%=i%>[<%=tl(i)%>] extends TypedRelation[(<%=tl(i)%>)] {
  def apply(<%=gt(i, j => "v" + j + ": T" + j)%>) = new ClosedAtom(this, (<%=gt(i, "v" + _)%>))
  def ?(<%=gt(i,j => "p" + j + ": Pattern[T" + j + "]")%>) = new OpenAtom(this, new Tuple<%=i%>Pattern(<%=pl(i: Int) = gt(i, "p" + _)%>))
}

#end
