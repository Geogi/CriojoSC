/*
 * Copyright (c) 2013 Mines Nantes.
 *
 * This file is part of CriojoSC.
 *
 * CriojoSC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CriojoSC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CriojoSC.  If not, see <http://www.gnu.org/licenses/>.
 */

<%
 def gt(i: Int, f: (Int) => String) = (1 to i).map(f).mkString(", ")
%>
package fr.emn.criojosc

import reflect.macros.Context

object RelationMacros {
  def genClosedAtom(c: Context)(v: c.Expr[Any])(symbol: c.Expr[RelationSymbol]): c.Expr[ClosedAtom] = {
    import c.universe._
    reify(new ClosedAtom(symbol.splice, v.splice, c.Expr[String](Literal(Constant(show(v)))).splice))
  }
#for (i <- 2 to 22)
  def genClosedAtom<%=i%>[<%=gt(i, "T" + _ + ": c.WeakTypeTag")%>](c: Context)(<%=gt(i, j => "v" + j + ": c.Expr[T" + j + "]")%>)(symbol: c.Expr[RelationSymbol]): c.Expr[ClosedAtom] = {
    import c.universe._
    genClosedAtom(c)(reify((<%=gt(i, "v" + _ + ".splice")%>)))(symbol)
  }
#end
}
